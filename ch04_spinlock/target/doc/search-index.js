var searchIndex = JSON.parse('{\
"ch04_spinlock":{"doc":"","t":[3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,11,11,11,11,11,11,11,11,12],"n":["Guard","SpinLock","_p","borrow","borrow","borrow_mut","borrow_mut","deref","deref_mut","drop","from","from","into","into","lock","lock","locked","main","new","try_from","try_from","try_into","try_into","type_id","type_id","unlock","value"],"q":["ch04_spinlock","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,1,2,1,2,1,1,1,1,2,1,2,1,2,1,2,0,2,2,1,2,1,2,1,2,2],"f":[0,0,0,[[]],[[]],[[]],[[]],[1],[1],[1],[[]],[[]],[[]],[[]],[2,1],0,0,[[]],[[],2],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[2],0],"p":[[3,"Guard"],[3,"SpinLock"],[4,"Result"],[3,"TypeId"]]},\
"impls":{"doc":"Determine if a type implements a logical trait expression<strong>?</strong>…","t":[14],"n":["impls"],"q":["impls"],"d":["Returns <code>true</code> if a type implements a logical trait …"],"i":[0],"f":[0],"p":[]},\
"static_assertions":{"doc":"Banner","t":[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"n":["assert_cfg","assert_eq_align","assert_eq_size","assert_eq_size_ptr","assert_eq_size_val","assert_fields","assert_impl_all","assert_impl_any","assert_impl_one","assert_not_impl_all","assert_not_impl_any","assert_obj_safe","assert_trait_sub_all","assert_trait_super_all","assert_type_eq_all","assert_type_ne_all","const_assert","const_assert_eq","const_assert_ne"],"q":["static_assertions","","","","","","","","","","","","","","","","","",""],"d":["Asserts that a given configuration is set.","Asserts that types are equal in alignment.","Asserts that types are equal in size.","Asserts that values pointed to are equal in size.","Asserts that values are equal in size.","Asserts that the type has the given fields.","Asserts that the type implements <em>all</em> of the given traits.","Asserts that the type implements <em>any</em> of the given traits.","Asserts that the type implements exactly one in a set of …","Asserts that the type does <strong>not</strong> implement <em>all</em> of the given …","Asserts that the type does <strong>not</strong> implement <em>any</em> of the given …","Asserts that the traits support dynamic dispatch (…","Asserts that the trait is a child of all of the other …","Asserts that the trait is a parent of all of the other …","Asserts that <em>all</em> types in a list are equal to each other.","Asserts that <em>all</em> types are <strong>not</strong> equal to each other.","Asserts that constant expressions evaluate to <code>true</code>.","Asserts that constants are equal in value.","Asserts that constants are <strong>not</strong> equal in value."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
